The application QRBox includes the following features:

Login Page: Users can log in with their credentials.
Registration Page: If users don't have an account, they can register by providing their details.
Main Page: After logging in, users can access the QR code generation form, which has required fields:
URL Field: Input the URL to be encoded in the QR code.
Size Option: Set the size of the generated QR code.
Additional Options:
Enable a transparent background for the QR code.
Upload a custom background image.
Upload an image to serve as a logo within the QR code.
Customize the colors of the QR code elements.

Additionally:

Data Storage: User information and generated QR codes are stored in an SQLite3 database by default, with the option to switch to another database management system if desired.
QR Code Storage: Generated QR codes are saved as BLOB data in the database.
Password Security: User passwords are stored in hashed form, while other data is stored in plain text as-is.

How to run projects:
python 3.11.*
django
pip insatll -r requirement.txt
django-admin startproject myproject
	cd myproject
python manage.py startapp myapp
python manage.py makemigrations
python manage.py migrate
python manage.py runserver

fastapi
pip insatll -r requirement.txt
alembic init migrations
migrations/env.py
	from backend.db import Base
	from models import QRcodes, Customer
	target_metadata = Base.metadata
alembic.ini
	sqlalchemy.url = sqlite:///db.sqlite3
alembic revision --autogenerate -m "Initial migration"
alembic upgrade head
pytnon -m uvicorn main:app
    or
run main.py

flask
pip insatll -r requirement.txt
run main.py
